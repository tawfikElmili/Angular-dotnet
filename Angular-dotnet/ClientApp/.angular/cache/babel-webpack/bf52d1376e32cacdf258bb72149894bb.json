{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\n\nclass ThemeService {\n  constructor() {\n    this.colorschemesOptions = new BehaviorSubject(undefined);\n  }\n\n  setColorschemesOptions(options) {\n    this.pColorschemesOptions = options;\n    this.colorschemesOptions.next(options);\n  }\n\n  getColorschemesOptions() {\n    return this.pColorschemesOptions;\n  }\n\n}\n\nThemeService.ɵfac = function ThemeService_Factory(t) {\n  return new (t || ThemeService)();\n};\n\nThemeService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ThemeService,\n  factory: ThemeService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ThemeService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\n\nclass BaseChartDirective {\n  constructor(element, zone, themeService) {\n    this.element = element;\n    this.zone = zone;\n    this.themeService = themeService;\n    this.type = 'bar';\n    this.plugins = [];\n    this.chartClick = new EventEmitter();\n    this.chartHover = new EventEmitter();\n    this.subs = [];\n    this.ctx = element.nativeElement.getContext('2d');\n    this.subs.push(this.themeService.colorschemesOptions.pipe(distinctUntilChanged()).subscribe(r => this.themeChanged(r)));\n  }\n\n  ngOnChanges(changes) {\n    const requireRender = ['type'];\n    const propertyNames = Object.getOwnPropertyNames(changes);\n\n    if (propertyNames.some(key => requireRender.includes(key)) || propertyNames.every(key => changes[key].isFirstChange())) {\n      this.render();\n    } else {\n      const config = this.getChartConfiguration();\n\n      if (this.chart) {\n        Object.assign(this.chart.config.data, config.data);\n        Object.assign(this.chart.config.plugins, config.plugins);\n        Object.assign(this.chart.config.options, config.options);\n      }\n\n      this.update();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.chart) {\n      this.chart.destroy();\n      this.chart = void 0;\n    }\n\n    this.subs.forEach(s => s.unsubscribe());\n  }\n\n  render() {\n    if (this.chart) {\n      this.chart.destroy();\n    }\n\n    return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n  }\n\n  update(duration) {\n    if (this.chart) {\n      this.zone.runOutsideAngular(() => this.chart?.update(duration));\n    }\n  }\n\n  hideDataset(index, hidden) {\n    if (this.chart) {\n      this.chart.getDatasetMeta(index).hidden = hidden;\n      this.update();\n    }\n  }\n\n  isDatasetHidden(index) {\n    return this.chart?.getDatasetMeta(index)?.hidden;\n  }\n\n  toBase64Image() {\n    return this.chart?.toBase64Image();\n  }\n\n  themeChanged(options) {\n    this.themeOverrides = options;\n\n    if (this.chart) {\n      Object.assign(this.chart.config.options, this.getChartOptions());\n      this.update();\n    }\n  }\n\n  getChartOptions() {\n    return merge({\n      onHover: (event, active) => {\n        if (this.chartHover.observed && active && !active.length) {\n          return;\n        }\n\n        this.zone.run(() => this.chartHover.emit({\n          event,\n          active\n        }));\n      },\n      onClick: (event, active) => {\n        if (!this.chartClick.observed) {\n          return;\n        }\n\n        this.zone.run(() => this.chartClick.emit({\n          event,\n          active\n        }));\n      }\n    }, this.themeOverrides, this.options, {\n      plugins: {\n        legend: {\n          display: this.legend\n        }\n      }\n    });\n  }\n\n  getChartConfiguration() {\n    return {\n      type: this.type,\n      data: this.getChartData(),\n      plugins: this.plugins,\n      options: this.getChartOptions()\n    };\n  }\n\n  getChartData() {\n    return this.data ? this.data : {\n      labels: this.labels || [],\n      datasets: this.datasets || []\n    };\n  }\n\n}\n\nBaseChartDirective.ɵfac = function BaseChartDirective_Factory(t) {\n  return new (t || BaseChartDirective)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.NgZone), i0.ɵɵdirectiveInject(ThemeService));\n};\n\nBaseChartDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: BaseChartDirective,\n  selectors: [[\"canvas\", \"baseChart\", \"\"]],\n  inputs: {\n    type: \"type\",\n    legend: \"legend\",\n    data: \"data\",\n    options: \"options\",\n    plugins: \"plugins\",\n    labels: \"labels\",\n    datasets: \"datasets\"\n  },\n  outputs: {\n    chartClick: \"chartClick\",\n    chartHover: \"chartHover\"\n  },\n  exportAs: [\"base-chart\"],\n  features: [i0.ɵɵNgOnChangesFeature]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(BaseChartDirective, [{\n    type: Directive,\n    args: [{\n      // eslint-disable-next-line @angular-eslint/directive-selector\n      selector: 'canvas[baseChart]',\n      exportAs: 'base-chart'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.NgZone\n    }, {\n      type: ThemeService\n    }];\n  }, {\n    type: [{\n      type: Input\n    }],\n    legend: [{\n      type: Input\n    }],\n    data: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    plugins: [{\n      type: Input\n    }],\n    labels: [{\n      type: Input\n    }],\n    datasets: [{\n      type: Input\n    }],\n    chartClick: [{\n      type: Output\n    }],\n    chartHover: [{\n      type: Output\n    }]\n  });\n})();\n\nconst baseColors = [[255, 99, 132], [54, 162, 235], [255, 206, 86], [231, 233, 237], [75, 192, 192], [151, 187, 205], [220, 220, 220], [247, 70, 74], [70, 191, 189], [253, 180, 92], [148, 159, 177], [77, 83, 96]];\nconst builtInDefaults = {\n  datasets: {\n    line: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.4),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBackgroundColor: context => rgba(generateColor(context.datasetIndex), 1),\n      pointBorderColor: '#fff',\n      pointHoverBackgroundColor: '#fff',\n      pointHoverBorderColor: context => rgba(generateColor(context.datasetIndex), 0.8)\n    },\n    bar: {\n      backgroundColor: context => rgba(generateColor(context.datasetIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.datasetIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.datasetIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.datasetIndex), 1)\n    },\n\n    get radar() {\n      return this.line;\n    },\n\n    doughnut: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: '#fff',\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n\n    get pie() {\n      return this.doughnut;\n    },\n\n    polarArea: {\n      backgroundColor: context => rgba(generateColor(context.dataIndex), 0.6),\n      borderColor: context => rgba(generateColor(context.dataIndex), 1),\n      hoverBackgroundColor: context => rgba(generateColor(context.dataIndex), 0.8),\n      hoverBorderColor: context => rgba(generateColor(context.dataIndex), 1)\n    },\n\n    get bubble() {\n      return this.doughnut;\n    },\n\n    get scatter() {\n      return this.doughnut;\n    },\n\n    get area() {\n      return this.polarArea;\n    }\n\n  }\n};\n\nfunction rgba(colour, alpha) {\n  return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\n\nfunction getRandomInt(min, max) {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nfunction getRandomColor() {\n  return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors\n */\n\n\nfunction generateColor(index = 0) {\n  return baseColors[index] || getRandomColor();\n}\n\nChart.register(Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale);\n\nclass NgChartsConfiguration {}\n\nNgChartsConfiguration.ɵfac = function NgChartsConfiguration_Factory(t) {\n  return new (t || NgChartsConfiguration)();\n};\n\nNgChartsConfiguration.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: NgChartsConfiguration,\n  factory: NgChartsConfiguration.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgChartsConfiguration, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\n\nclass NgChartsModule {\n  constructor(config) {\n    if (config?.plugins) Chart.register(...config?.plugins);\n    const ngChartsDefaults = merge(builtInDefaults, config?.defaults || {});\n    defaults.set(ngChartsDefaults);\n  }\n\n  static forRoot(config) {\n    return {\n      ngModule: NgChartsModule,\n      providers: [{\n        provide: NgChartsConfiguration,\n        useValue: config\n      }]\n    };\n  }\n\n}\n\nNgChartsModule.ɵfac = function NgChartsModule_Factory(t) {\n  return new (t || NgChartsModule)(i0.ɵɵinject(NgChartsConfiguration, 8));\n};\n\nNgChartsModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: NgChartsModule\n});\nNgChartsModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[]]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgChartsModule, [{\n    type: NgModule,\n    args: [{\n      imports: [],\n      declarations: [BaseChartDirective],\n      exports: [BaseChartDirective]\n    }]\n  }], function () {\n    return [{\n      type: NgChartsConfiguration,\n      decorators: [{\n        type: Optional\n      }]\n    }];\n  }, null);\n})();\n/*\n * Public API Surface of ng2-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };","map":{"version":3,"sources":["C:/Users/telmili/source/repos/Angular-dotnet/Angular-dotnet/ClientApp/node_modules/ng2-charts/fesm2020/ng2-charts.mjs"],"names":["i0","Injectable","EventEmitter","Directive","Input","Output","NgModule","Optional","Chart","Title","Tooltip","Filler","Legend","LineController","LineElement","PointElement","LinearScale","CategoryScale","BarController","BarElement","DoughnutController","ArcElement","RadarController","RadialLinearScale","PieController","PolarAreaController","BubbleController","ScatterController","TimeSeriesScale","defaults","distinctUntilChanged","merge","BehaviorSubject","ThemeService","constructor","colorschemesOptions","undefined","setColorschemesOptions","options","pColorschemesOptions","next","getColorschemesOptions","ɵfac","ɵprov","type","args","providedIn","BaseChartDirective","element","zone","themeService","plugins","chartClick","chartHover","subs","ctx","nativeElement","getContext","push","pipe","subscribe","r","themeChanged","ngOnChanges","changes","requireRender","propertyNames","Object","getOwnPropertyNames","some","key","includes","every","isFirstChange","render","config","getChartConfiguration","chart","assign","data","update","ngOnDestroy","destroy","forEach","s","unsubscribe","runOutsideAngular","duration","hideDataset","index","hidden","getDatasetMeta","isDatasetHidden","toBase64Image","themeOverrides","getChartOptions","onHover","event","active","observed","length","run","emit","onClick","legend","display","getChartData","labels","datasets","ElementRef","NgZone","ɵdir","selector","exportAs","baseColors","builtInDefaults","line","backgroundColor","context","rgba","generateColor","datasetIndex","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","bar","hoverBackgroundColor","hoverBorderColor","radar","doughnut","dataIndex","pie","polarArea","bubble","scatter","area","colour","alpha","concat","join","getRandomInt","min","max","Math","floor","random","getRandomColor","register","NgChartsConfiguration","NgChartsModule","ngChartsDefaults","set","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","declarations","exports","decorators"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, Directive, Input, Output, NgModule, Optional } from '@angular/core';\nimport { Chart, Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale, defaults } from 'chart.js';\nimport { distinctUntilChanged } from 'rxjs/operators';\nimport { merge } from 'lodash-es';\nimport { BehaviorSubject } from 'rxjs';\n\nclass ThemeService {\n    constructor() {\n        this.colorschemesOptions = new BehaviorSubject(undefined);\n    }\n    setColorschemesOptions(options) {\n        this.pColorschemesOptions = options;\n        this.colorschemesOptions.next(options);\n    }\n    getColorschemesOptions() {\n        return this.pColorschemesOptions;\n    }\n}\nThemeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ThemeService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nThemeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ThemeService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ThemeService, decorators: [{\n            type: Injectable,\n            args: [{\n                    providedIn: 'root'\n                }]\n        }], ctorParameters: function () { return []; } });\n\nclass BaseChartDirective {\n    constructor(element, zone, themeService) {\n        this.element = element;\n        this.zone = zone;\n        this.themeService = themeService;\n        this.type = 'bar';\n        this.plugins = [];\n        this.chartClick = new EventEmitter();\n        this.chartHover = new EventEmitter();\n        this.subs = [];\n        this.ctx = element.nativeElement.getContext('2d');\n        this.subs.push(this.themeService.colorschemesOptions\n            .pipe(distinctUntilChanged())\n            .subscribe(r => this.themeChanged(r)));\n    }\n    ngOnChanges(changes) {\n        const requireRender = ['type'];\n        const propertyNames = Object.getOwnPropertyNames(changes);\n        if (propertyNames.some(key => requireRender.includes(key)) ||\n            propertyNames.every(key => changes[key].isFirstChange())) {\n            this.render();\n        }\n        else {\n            const config = this.getChartConfiguration();\n            if (this.chart) {\n                Object.assign(this.chart.config.data, config.data);\n                Object.assign(this.chart.config.plugins, config.plugins);\n                Object.assign(this.chart.config.options, config.options);\n            }\n            this.update();\n        }\n    }\n    ngOnDestroy() {\n        if (this.chart) {\n            this.chart.destroy();\n            this.chart = void 0;\n        }\n        this.subs.forEach(s => s.unsubscribe());\n    }\n    render() {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n        return this.zone.runOutsideAngular(() => this.chart = new Chart(this.ctx, this.getChartConfiguration()));\n    }\n    update(duration) {\n        if (this.chart) {\n            this.zone.runOutsideAngular(() => this.chart?.update(duration));\n        }\n    }\n    hideDataset(index, hidden) {\n        if (this.chart) {\n            this.chart.getDatasetMeta(index).hidden = hidden;\n            this.update();\n        }\n    }\n    isDatasetHidden(index) {\n        return this.chart?.getDatasetMeta(index)?.hidden;\n    }\n    toBase64Image() {\n        return this.chart?.toBase64Image();\n    }\n    themeChanged(options) {\n        this.themeOverrides = options;\n        if (this.chart) {\n            Object.assign(this.chart.config.options, this.getChartOptions());\n            this.update();\n        }\n    }\n    getChartOptions() {\n        return merge({\n            onHover: (event, active) => {\n                if (this.chartHover.observed && active && !active.length) {\n                    return;\n                }\n                this.zone.run(() => this.chartHover.emit({ event, active }));\n            },\n            onClick: (event, active) => {\n                if (!this.chartClick.observed) {\n                    return;\n                }\n                this.zone.run(() => this.chartClick.emit({ event, active }));\n            }\n        }, this.themeOverrides, this.options, {\n            plugins: {\n                legend: {\n                    display: this.legend\n                }\n            }\n        });\n    }\n    getChartConfiguration() {\n        return {\n            type: this.type,\n            data: this.getChartData(),\n            plugins: this.plugins,\n            options: this.getChartOptions()\n        };\n    }\n    getChartData() {\n        return this.data ? this.data : {\n            labels: this.labels || [],\n            datasets: this.datasets || []\n        };\n    }\n}\nBaseChartDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: BaseChartDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: ThemeService }], target: i0.ɵɵFactoryTarget.Directive });\nBaseChartDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: BaseChartDirective, selector: \"canvas[baseChart]\", inputs: { type: \"type\", legend: \"legend\", data: \"data\", options: \"options\", plugins: \"plugins\", labels: \"labels\", datasets: \"datasets\" }, outputs: { chartClick: \"chartClick\", chartHover: \"chartHover\" }, exportAs: [\"base-chart\"], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: BaseChartDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    // eslint-disable-next-line @angular-eslint/directive-selector\n                    selector: 'canvas[baseChart]',\n                    exportAs: 'base-chart',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: ThemeService }]; }, propDecorators: { type: [{\n                type: Input\n            }], legend: [{\n                type: Input\n            }], data: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], plugins: [{\n                type: Input\n            }], labels: [{\n                type: Input\n            }], datasets: [{\n                type: Input\n            }], chartClick: [{\n                type: Output\n            }], chartHover: [{\n                type: Output\n            }] } });\n\nconst baseColors = [\n    [255, 99, 132],\n    [54, 162, 235],\n    [255, 206, 86],\n    [231, 233, 237],\n    [75, 192, 192],\n    [151, 187, 205],\n    [220, 220, 220],\n    [247, 70, 74],\n    [70, 191, 189],\n    [253, 180, 92],\n    [148, 159, 177],\n    [77, 83, 96]\n];\n\nconst builtInDefaults = {\n    datasets: {\n        line: {\n            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.4),\n            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            pointBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: (context) => rgba(generateColor(context.datasetIndex), 0.8)\n        },\n        bar: {\n            backgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.6),\n            borderColor: (context) => rgba(generateColor(context.datasetIndex), 1),\n            hoverBackgroundColor: (context) => rgba(generateColor(context.datasetIndex), 0.8),\n            hoverBorderColor: (context) => rgba(generateColor(context.datasetIndex), 1)\n        },\n        get radar() {\n            return this.line;\n        },\n        doughnut: {\n            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),\n            borderColor: '#fff',\n            hoverBackgroundColor: (context) => rgba(generateColor(context.dataIndex), 1),\n            hoverBorderColor: (context) => rgba(generateColor(context.dataIndex), 1)\n        },\n        get pie() {\n            return this.doughnut;\n        },\n        polarArea: {\n            backgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.6),\n            borderColor: (context) => rgba(generateColor(context.dataIndex), 1),\n            hoverBackgroundColor: (context) => rgba(generateColor(context.dataIndex), 0.8),\n            hoverBorderColor: (context) => rgba(generateColor(context.dataIndex), 1)\n        },\n        get bubble() {\n            return this.doughnut;\n        },\n        get scatter() {\n            return this.doughnut;\n        },\n        get area() {\n            return this.polarArea;\n        }\n    }\n};\nfunction rgba(colour, alpha) {\n    return 'rgba(' + colour.concat(alpha).join(',') + ')';\n}\nfunction getRandomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\nfunction getRandomColor() {\n    return [getRandomInt(0, 255), getRandomInt(0, 255), getRandomInt(0, 255)];\n}\n/**\n * Generate colors\n */\nfunction generateColor(index = 0) {\n    return baseColors[index] || getRandomColor();\n}\n\nChart.register(Title, Tooltip, Filler, Legend, LineController, LineElement, PointElement, LinearScale, CategoryScale, BarController, BarElement, DoughnutController, ArcElement, RadarController, RadialLinearScale, PieController, PolarAreaController, BubbleController, ScatterController, TimeSeriesScale);\nclass NgChartsConfiguration {\n}\nNgChartsConfiguration.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgChartsConfiguration, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nNgChartsConfiguration.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgChartsConfiguration, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgChartsConfiguration, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }] });\nclass NgChartsModule {\n    constructor(config) {\n        if (config?.plugins)\n            Chart.register(...config?.plugins);\n        const ngChartsDefaults = merge(builtInDefaults, config?.defaults || {});\n        defaults.set(ngChartsDefaults);\n    }\n    static forRoot(config) {\n        return {\n            ngModule: NgChartsModule,\n            providers: [\n                { provide: NgChartsConfiguration, useValue: config }\n            ]\n        };\n    }\n}\nNgChartsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgChartsModule, deps: [{ token: NgChartsConfiguration, optional: true }], target: i0.ɵɵFactoryTarget.NgModule });\nNgChartsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgChartsModule, declarations: [BaseChartDirective], exports: [BaseChartDirective] });\nNgChartsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgChartsModule, imports: [[]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgChartsModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [],\n                    declarations: [BaseChartDirective],\n                    exports: [BaseChartDirective]\n                }]\n        }], ctorParameters: function () { return [{ type: NgChartsConfiguration, decorators: [{\n                    type: Optional\n                }] }]; } });\n\n/*\n * Public API Surface of ng2-charts\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BaseChartDirective, NgChartsConfiguration, NgChartsModule, ThemeService, baseColors };\n"]},"metadata":{},"sourceType":"module"}